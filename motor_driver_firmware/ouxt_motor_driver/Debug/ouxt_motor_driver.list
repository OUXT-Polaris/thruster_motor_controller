
ouxt_motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002538  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002730  08002730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002740  08002740  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002740  08002740  00012740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002748  08002748  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002748  08002748  00012748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800274c  0800274c  0001274c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  0800275c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800275c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a3e  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014a2  00000000  00000000  00029a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002af20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002b930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262c7  00000000  00000000  0002c288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af33  00000000  00000000  0005254f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1a56  00000000  00000000  0005d482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  0014eed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c8  00000000  00000000  0014ef24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002718 	.word	0x08002718

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002718 	.word	0x08002718

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fa65 	bl	8000a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f806 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f93e 	bl	80007c8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800054c:	f000 f870 	bl	8000630 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x14>
	...

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2234      	movs	r2, #52	; 0x34
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 f8d0 	bl	8002708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <SystemClock_Config+0xd4>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a2a      	ldr	r2, [pc, #168]	; (8000628 <SystemClock_Config+0xd4>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0xd4>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	4b26      	ldr	r3, [pc, #152]	; (800062c <SystemClock_Config+0xd8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a25      	ldr	r2, [pc, #148]	; (800062c <SystemClock_Config+0xd8>)
 8000596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <SystemClock_Config+0xd8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005bc:	2308      	movs	r3, #8
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005c0:	23d8      	movs	r3, #216	; 0xd8
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fd73 	bl	80010c0 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005e0:	f000 f92e 	bl	8000840 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005e4:	f000 fd1c 	bl	8001020 <HAL_PWREx_EnableOverDrive>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ee:	f000 f927 	bl	8000840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	2107      	movs	r1, #7
 8000610:	4618      	mov	r0, r3
 8000612:	f001 f803 	bl	800161c <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800061c:	f000 f910 	bl	8000840 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b09a      	sub	sp, #104	; 0x68
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000636:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000644:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000650:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]
 8000662:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	222c      	movs	r2, #44	; 0x2c
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f002 f84c 	bl	8002708 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000670:	4b53      	ldr	r3, [pc, #332]	; (80007c0 <MX_TIM1_Init+0x190>)
 8000672:	4a54      	ldr	r2, [pc, #336]	; (80007c4 <MX_TIM1_Init+0x194>)
 8000674:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000676:	4b52      	ldr	r3, [pc, #328]	; (80007c0 <MX_TIM1_Init+0x190>)
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067c:	4b50      	ldr	r3, [pc, #320]	; (80007c0 <MX_TIM1_Init+0x190>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000682:	4b4f      	ldr	r3, [pc, #316]	; (80007c0 <MX_TIM1_Init+0x190>)
 8000684:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000688:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068a:	4b4d      	ldr	r3, [pc, #308]	; (80007c0 <MX_TIM1_Init+0x190>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000690:	4b4b      	ldr	r3, [pc, #300]	; (80007c0 <MX_TIM1_Init+0x190>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000696:	4b4a      	ldr	r3, [pc, #296]	; (80007c0 <MX_TIM1_Init+0x190>)
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800069c:	4848      	ldr	r0, [pc, #288]	; (80007c0 <MX_TIM1_Init+0x190>)
 800069e:	f001 f96f 	bl	8001980 <HAL_TIM_Base_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006a8:	f000 f8ca 	bl	8000840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006b6:	4619      	mov	r1, r3
 80006b8:	4841      	ldr	r0, [pc, #260]	; (80007c0 <MX_TIM1_Init+0x190>)
 80006ba:	f001 fa93 	bl	8001be4 <HAL_TIM_ConfigClockSource>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006c4:	f000 f8bc 	bl	8000840 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80006c8:	483d      	ldr	r0, [pc, #244]	; (80007c0 <MX_TIM1_Init+0x190>)
 80006ca:	f001 f9b0 	bl	8001a2e <HAL_TIM_OC_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006d4:	f000 f8b4 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d8:	2300      	movs	r3, #0
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006e8:	4619      	mov	r1, r3
 80006ea:	4835      	ldr	r0, [pc, #212]	; (80007c0 <MX_TIM1_Init+0x190>)
 80006ec:	f001 fedc 	bl	80024a8 <HAL_TIMEx_MasterConfigSynchronization>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006f6:	f000 f8a3 	bl	8000840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80006fa:	2310      	movs	r3, #16
 80006fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000702:	2300      	movs	r3, #0
 8000704:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000706:	2300      	movs	r3, #0
 8000708:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800070e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000718:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800071a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800071e:	2200      	movs	r2, #0
 8000720:	4619      	mov	r1, r3
 8000722:	4827      	ldr	r0, [pc, #156]	; (80007c0 <MX_TIM1_Init+0x190>)
 8000724:	f001 f9e4 	bl	8001af0 <HAL_TIM_OC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800072e:	f000 f887 	bl	8000840 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <MX_TIM1_Init+0x190>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	699a      	ldr	r2, [r3, #24]
 8000738:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_TIM1_Init+0x190>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f042 0208 	orr.w	r2, r2, #8
 8000740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000742:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000746:	2204      	movs	r2, #4
 8000748:	4619      	mov	r1, r3
 800074a:	481d      	ldr	r0, [pc, #116]	; (80007c0 <MX_TIM1_Init+0x190>)
 800074c:	f001 f9d0 	bl	8001af0 <HAL_TIM_OC_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000756:	f000 f873 	bl	8000840 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_TIM1_Init+0x190>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_TIM1_Init+0x190>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000768:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0x2;
 8000776:	2302      	movs	r3, #2
 8000778:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800077e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000782:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800078c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000796:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <MX_TIM1_Init+0x190>)
 80007a2:	f001 ff0f 	bl	80025c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 80007ac:	f000 f848 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <MX_TIM1_Init+0x190>)
 80007b2:	f000 f88f 	bl	80008d4 <HAL_TIM_MspPostInit>

}
 80007b6:	bf00      	nop
 80007b8:	3768      	adds	r7, #104	; 0x68
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000028 	.word	0x20000028
 80007c4:	40010000 	.word	0x40010000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_GPIO_Init+0x70>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e0:	4a15      	ldr	r2, [pc, #84]	; (8000838 <MX_GPIO_Init+0x70>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	6313      	str	r3, [r2, #48]	; 0x30
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_GPIO_Init+0x70>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ec:	f003 0310 	and.w	r3, r3, #16
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	4810      	ldr	r0, [pc, #64]	; (800083c <MX_GPIO_Init+0x74>)
 80007fa:	f000 fbf7 	bl	8000fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007fe:	2304      	movs	r3, #4
 8000800:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <MX_GPIO_Init+0x74>)
 8000814:	f000 fa3e 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000818:	2303      	movs	r3, #3
 800081a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_GPIO_Init+0x74>)
 800082c:	f000 fa32 	bl	8000c94 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40021000 	.word	0x40021000

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_MspInit+0x44>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_MspInit+0x44>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_MspInit+0x44>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x44>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x44>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x44>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <HAL_TIM_Base_MspInit+0x38>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d10b      	bne.n	80008be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_TIM_Base_MspInit+0x3c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <HAL_TIM_Base_MspInit+0x3c>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <HAL_TIM_Base_MspInit+0x3c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40010000 	.word	0x40010000
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a11      	ldr	r2, [pc, #68]	; (8000938 <HAL_TIM_MspPostInit+0x64>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d11c      	bne.n	8000930 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_TIM_MspPostInit+0x68>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_TIM_MspPostInit+0x68>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_TIM_MspPostInit+0x68>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MotorA_Low_Pin|MotorA_High_Pin|MotorB_Low_Pin|MotorB_LowE11_Pin;
 800090e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000912:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000920:	2301      	movs	r3, #1
 8000922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4619      	mov	r1, r3
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <HAL_TIM_MspPostInit+0x6c>)
 800092c:	f000 f9b2 	bl	8000c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000930:	bf00      	nop
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40010000 	.word	0x40010000
 800093c:	40023800 	.word	0x40023800
 8000940:	40021000 	.word	0x40021000

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f87a 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009c2:	490e      	ldr	r1, [pc, #56]	; (80009fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d8:	4c0b      	ldr	r4, [pc, #44]	; (8000a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009e6:	f7ff ffd7 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ea:	f001 fe69 	bl	80026c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ee:	f7ff fda5 	bl	800053c <main>
  bx  lr    
 80009f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009f4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a00:	08002750 	.word	0x08002750
  ldr r2, =_sbss
 8000a04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a08:	20000078 	.word	0x20000078

08000a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC_IRQHandler>

08000a0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f000 f90a 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a18:	200f      	movs	r0, #15
 8000a1a:	f000 f805 	bl	8000a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1e:	f7ff ff15 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_InitTick+0x54>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_InitTick+0x58>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f917 	bl	8000c7a <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00e      	b.n	8000a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d80a      	bhi.n	8000a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f000 f8ed 	bl	8000c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <HAL_InitTick+0x5c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000004 	.word	0x20000004

08000a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_IncTick+0x24>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_IncTick+0x24>)
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000074 	.word	0x20000074

08000ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <HAL_GetTick+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000074 	.word	0x20000074

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <__NVIC_SetPriorityGrouping+0x40>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	4313      	orrs	r3, r2
 8000af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <__NVIC_SetPriorityGrouping+0x40>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00
 8000b0c:	05fa0000 	.word	0x05fa0000

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	; (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	; (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	; 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf8:	d301      	bcc.n	8000bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00f      	b.n	8000c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <SysTick_Config+0x40>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c06:	210f      	movs	r1, #15
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f7ff ff8e 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <SysTick_Config+0x40>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <SysTick_Config+0x40>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff47 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c54:	f7ff ff5c 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	6978      	ldr	r0, [r7, #20]
 8000c60:	f7ff ff8e 	bl	8000b80 <NVIC_EncodePriority>
 8000c64:	4602      	mov	r2, r0
 8000c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff5d 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ffb0 	bl	8000be8 <SysTick_Config>
 8000c88:	4603      	mov	r3, r0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	e175      	b.n	8000fa0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	f040 8164 	bne.w	8000f9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d005      	beq.n	8000cea <HAL_GPIO_Init+0x56>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d130      	bne.n	8000d4c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	091b      	lsrs	r3, r3, #4
 8000d36:	f003 0201 	and.w	r2, r3, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d017      	beq.n	8000d88 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d123      	bne.n	8000ddc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	08da      	lsrs	r2, r3, #3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3208      	adds	r2, #8
 8000d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	69b9      	ldr	r1, [r7, #24]
 8000dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0203 	and.w	r2, r3, #3
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80be 	beq.w	8000f9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	4b66      	ldr	r3, [pc, #408]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a65      	ldr	r2, [pc, #404]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b63      	ldr	r3, [pc, #396]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e36:	4a61      	ldr	r2, [pc, #388]	; (8000fbc <HAL_GPIO_Init+0x328>)
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a58      	ldr	r2, [pc, #352]	; (8000fc0 <HAL_GPIO_Init+0x32c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d037      	beq.n	8000ed2 <HAL_GPIO_Init+0x23e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a57      	ldr	r2, [pc, #348]	; (8000fc4 <HAL_GPIO_Init+0x330>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d031      	beq.n	8000ece <HAL_GPIO_Init+0x23a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a56      	ldr	r2, [pc, #344]	; (8000fc8 <HAL_GPIO_Init+0x334>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d02b      	beq.n	8000eca <HAL_GPIO_Init+0x236>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a55      	ldr	r2, [pc, #340]	; (8000fcc <HAL_GPIO_Init+0x338>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d025      	beq.n	8000ec6 <HAL_GPIO_Init+0x232>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a54      	ldr	r2, [pc, #336]	; (8000fd0 <HAL_GPIO_Init+0x33c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d01f      	beq.n	8000ec2 <HAL_GPIO_Init+0x22e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a53      	ldr	r2, [pc, #332]	; (8000fd4 <HAL_GPIO_Init+0x340>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d019      	beq.n	8000ebe <HAL_GPIO_Init+0x22a>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a52      	ldr	r2, [pc, #328]	; (8000fd8 <HAL_GPIO_Init+0x344>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d013      	beq.n	8000eba <HAL_GPIO_Init+0x226>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a51      	ldr	r2, [pc, #324]	; (8000fdc <HAL_GPIO_Init+0x348>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d00d      	beq.n	8000eb6 <HAL_GPIO_Init+0x222>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a50      	ldr	r2, [pc, #320]	; (8000fe0 <HAL_GPIO_Init+0x34c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d007      	beq.n	8000eb2 <HAL_GPIO_Init+0x21e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4f      	ldr	r2, [pc, #316]	; (8000fe4 <HAL_GPIO_Init+0x350>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d101      	bne.n	8000eae <HAL_GPIO_Init+0x21a>
 8000eaa:	2309      	movs	r3, #9
 8000eac:	e012      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000eae:	230a      	movs	r3, #10
 8000eb0:	e010      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	e00e      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	e00c      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000eba:	2306      	movs	r3, #6
 8000ebc:	e00a      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	e008      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e004      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	e002      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	69fa      	ldr	r2, [r7, #28]
 8000ed6:	f002 0203 	and.w	r2, r2, #3
 8000eda:	0092      	lsls	r2, r2, #2
 8000edc:	4093      	lsls	r3, r2
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ee4:	4935      	ldr	r1, [pc, #212]	; (8000fbc <HAL_GPIO_Init+0x328>)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef2:	4b3d      	ldr	r3, [pc, #244]	; (8000fe8 <HAL_GPIO_Init+0x354>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f16:	4a34      	ldr	r2, [pc, #208]	; (8000fe8 <HAL_GPIO_Init+0x354>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f1c:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <HAL_GPIO_Init+0x354>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f40:	4a29      	ldr	r2, [pc, #164]	; (8000fe8 <HAL_GPIO_Init+0x354>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f46:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <HAL_GPIO_Init+0x354>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6a:	4a1f      	ldr	r2, [pc, #124]	; (8000fe8 <HAL_GPIO_Init+0x354>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <HAL_GPIO_Init+0x354>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <HAL_GPIO_Init+0x354>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	f67f ae86 	bls.w	8000cb4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40013800 	.word	0x40013800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40021400 	.word	0x40021400
 8000fd8:	40021800 	.word	0x40021800
 8000fdc:	40021c00 	.word	0x40021c00
 8000fe0:	40022000 	.word	0x40022000
 8000fe4:	40022400 	.word	0x40022400
 8000fe8:	40013c00 	.word	0x40013c00

08000fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ffc:	787b      	ldrb	r3, [r7, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001008:	e003      	b.n	8001012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	619a      	str	r2, [r3, #24]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	4a22      	ldr	r2, [pc, #136]	; (80010b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	6413      	str	r3, [r2, #64]	; 0x40
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001042:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a1d      	ldr	r2, [pc, #116]	; (80010bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800104e:	f7ff fd2f 	bl	8000ab0 <HAL_GetTick>
 8001052:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001054:	e009      	b.n	800106a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001056:	f7ff fd2b 	bl	8000ab0 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001064:	d901      	bls.n	800106a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e022      	b.n	80010b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001076:	d1ee      	bne.n	8001056 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800107e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001082:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001084:	f7ff fd14 	bl	8000ab0 <HAL_GetTick>
 8001088:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800108a:	e009      	b.n	80010a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800108c:	f7ff fd10 	bl	8000ab0 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800109a:	d901      	bls.n	80010a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e007      	b.n	80010b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010ac:	d1ee      	bne.n	800108c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000

080010c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e29b      	b.n	800160e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 8087 	beq.w	80011f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010e4:	4b96      	ldr	r3, [pc, #600]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 030c 	and.w	r3, r3, #12
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d00c      	beq.n	800110a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f0:	4b93      	ldr	r3, [pc, #588]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d112      	bne.n	8001122 <HAL_RCC_OscConfig+0x62>
 80010fc:	4b90      	ldr	r3, [pc, #576]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001108:	d10b      	bne.n	8001122 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110a:	4b8d      	ldr	r3, [pc, #564]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d06c      	beq.n	80011f0 <HAL_RCC_OscConfig+0x130>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d168      	bne.n	80011f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e275      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112a:	d106      	bne.n	800113a <HAL_RCC_OscConfig+0x7a>
 800112c:	4b84      	ldr	r3, [pc, #528]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a83      	ldr	r2, [pc, #524]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	e02e      	b.n	8001198 <HAL_RCC_OscConfig+0xd8>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0x9c>
 8001142:	4b7f      	ldr	r3, [pc, #508]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a7e      	ldr	r2, [pc, #504]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b7c      	ldr	r3, [pc, #496]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a7b      	ldr	r2, [pc, #492]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001154:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e01d      	b.n	8001198 <HAL_RCC_OscConfig+0xd8>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0xc0>
 8001166:	4b76      	ldr	r3, [pc, #472]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a75      	ldr	r2, [pc, #468]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b73      	ldr	r3, [pc, #460]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a72      	ldr	r2, [pc, #456]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e00b      	b.n	8001198 <HAL_RCC_OscConfig+0xd8>
 8001180:	4b6f      	ldr	r3, [pc, #444]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a6e      	ldr	r2, [pc, #440]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b6c      	ldr	r3, [pc, #432]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a6b      	ldr	r2, [pc, #428]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a0:	f7ff fc86 	bl	8000ab0 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fc82 	bl	8000ab0 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	; 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e229      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	4b61      	ldr	r3, [pc, #388]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0xe8>
 80011c6:	e014      	b.n	80011f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fc72 	bl	8000ab0 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fc6e 	bl	8000ab0 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e215      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	4b57      	ldr	r3, [pc, #348]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x110>
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d069      	beq.n	80012d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011fe:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120a:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b08      	cmp	r3, #8
 8001214:	d11c      	bne.n	8001250 <HAL_RCC_OscConfig+0x190>
 8001216:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d116      	bne.n	8001250 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x17a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e1e9      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	493d      	ldr	r1, [pc, #244]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124e:	e040      	b.n	80012d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d023      	beq.n	80012a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001258:	4b39      	ldr	r3, [pc, #228]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a38      	ldr	r2, [pc, #224]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff fc24 	bl	8000ab0 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126c:	f7ff fc20 	bl	8000ab0 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1c7      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128a:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4929      	ldr	r1, [pc, #164]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
 800129e:	e018      	b.n	80012d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fc00 	bl	8000ab0 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fbfc 	bl	8000ab0 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e1a3      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d038      	beq.n	8001350 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d019      	beq.n	800131a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80012e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ea:	4a15      	ldr	r2, [pc, #84]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f2:	f7ff fbdd 	bl	8000ab0 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012fa:	f7ff fbd9 	bl	8000ab0 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e180      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800130e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x23a>
 8001318:	e01a      	b.n	8001350 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 800131c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_RCC_OscConfig+0x280>)
 8001320:	f023 0301 	bic.w	r3, r3, #1
 8001324:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001326:	f7ff fbc3 	bl	8000ab0 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132c:	e00a      	b.n	8001344 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132e:	f7ff fbbf 	bl	8000ab0 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d903      	bls.n	8001344 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e166      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
 8001340:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	4b92      	ldr	r3, [pc, #584]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1ee      	bne.n	800132e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80a4 	beq.w	80014a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135e:	4b8c      	ldr	r3, [pc, #560]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10d      	bne.n	8001386 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4b89      	ldr	r3, [pc, #548]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a88      	ldr	r2, [pc, #544]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b86      	ldr	r3, [pc, #536]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001382:	2301      	movs	r3, #1
 8001384:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001386:	4b83      	ldr	r3, [pc, #524]	; (8001594 <HAL_RCC_OscConfig+0x4d4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	2b00      	cmp	r3, #0
 8001390:	d118      	bne.n	80013c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001392:	4b80      	ldr	r3, [pc, #512]	; (8001594 <HAL_RCC_OscConfig+0x4d4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a7f      	ldr	r2, [pc, #508]	; (8001594 <HAL_RCC_OscConfig+0x4d4>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139e:	f7ff fb87 	bl	8000ab0 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a6:	f7ff fb83 	bl	8000ab0 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b64      	cmp	r3, #100	; 0x64
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e12a      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b8:	4b76      	ldr	r3, [pc, #472]	; (8001594 <HAL_RCC_OscConfig+0x4d4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x31a>
 80013cc:	4b70      	ldr	r3, [pc, #448]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	4a6f      	ldr	r2, [pc, #444]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6713      	str	r3, [r2, #112]	; 0x70
 80013d8:	e02d      	b.n	8001436 <HAL_RCC_OscConfig+0x376>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x33c>
 80013e2:	4b6b      	ldr	r3, [pc, #428]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e6:	4a6a      	ldr	r2, [pc, #424]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	6713      	str	r3, [r2, #112]	; 0x70
 80013ee:	4b68      	ldr	r3, [pc, #416]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	4a67      	ldr	r2, [pc, #412]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80013f4:	f023 0304 	bic.w	r3, r3, #4
 80013f8:	6713      	str	r3, [r2, #112]	; 0x70
 80013fa:	e01c      	b.n	8001436 <HAL_RCC_OscConfig+0x376>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b05      	cmp	r3, #5
 8001402:	d10c      	bne.n	800141e <HAL_RCC_OscConfig+0x35e>
 8001404:	4b62      	ldr	r3, [pc, #392]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001408:	4a61      	ldr	r2, [pc, #388]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6713      	str	r3, [r2, #112]	; 0x70
 8001410:	4b5f      	ldr	r3, [pc, #380]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001414:	4a5e      	ldr	r2, [pc, #376]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6713      	str	r3, [r2, #112]	; 0x70
 800141c:	e00b      	b.n	8001436 <HAL_RCC_OscConfig+0x376>
 800141e:	4b5c      	ldr	r3, [pc, #368]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001422:	4a5b      	ldr	r2, [pc, #364]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	6713      	str	r3, [r2, #112]	; 0x70
 800142a:	4b59      	ldr	r3, [pc, #356]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800142c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142e:	4a58      	ldr	r2, [pc, #352]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001430:	f023 0304 	bic.w	r3, r3, #4
 8001434:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d015      	beq.n	800146a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143e:	f7ff fb37 	bl	8000ab0 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	e00a      	b.n	800145c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff fb33 	bl	8000ab0 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e0d8      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145c:	4b4c      	ldr	r3, [pc, #304]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0ee      	beq.n	8001446 <HAL_RCC_OscConfig+0x386>
 8001468:	e014      	b.n	8001494 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146a:	f7ff fb21 	bl	8000ab0 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	e00a      	b.n	8001488 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	f7ff fb1d 	bl	8000ab0 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001480:	4293      	cmp	r3, r2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e0c2      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001488:	4b41      	ldr	r3, [pc, #260]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ee      	bne.n	8001472 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d105      	bne.n	80014a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149a:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a3c      	ldr	r2, [pc, #240]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80014a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80ae 	beq.w	800160c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b0:	4b37      	ldr	r3, [pc, #220]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d06d      	beq.n	8001598 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d14b      	bne.n	800155c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c4:	4b32      	ldr	r3, [pc, #200]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a31      	ldr	r2, [pc, #196]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80014ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff faee 	bl	8000ab0 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff faea 	bl	8000ab0 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e091      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	4b29      	ldr	r3, [pc, #164]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69da      	ldr	r2, [r3, #28]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	085b      	lsrs	r3, r3, #1
 800150e:	3b01      	subs	r3, #1
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	071b      	lsls	r3, r3, #28
 8001522:	491b      	ldr	r1, [pc, #108]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a18      	ldr	r2, [pc, #96]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800152e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fabc 	bl	8000ab0 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff fab8 	bl	8000ab0 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e05f      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x47c>
 800155a:	e057      	b.n	800160c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff faa2 	bl	8000ab0 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff fa9e 	bl	8000ab0 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e045      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001582:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_RCC_OscConfig+0x4d0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x4b0>
 800158e:	e03d      	b.n	800160c <HAL_RCC_OscConfig+0x54c>
 8001590:	40023800 	.word	0x40023800
 8001594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001598:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <HAL_RCC_OscConfig+0x558>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d030      	beq.n	8001608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d129      	bne.n	8001608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015be:	429a      	cmp	r2, r3
 80015c0:	d122      	bne.n	8001608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015c8:	4013      	ands	r3, r2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d119      	bne.n	8001608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	085b      	lsrs	r3, r3, #1
 80015e0:	3b01      	subs	r3, #1
 80015e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d10f      	bne.n	8001608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d107      	bne.n	8001608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d001      	beq.n	800160c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800

0800161c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0d0      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001634:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d910      	bls.n	8001664 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b67      	ldr	r3, [pc, #412]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 020f 	bic.w	r2, r3, #15
 800164a:	4965      	ldr	r1, [pc, #404]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0b8      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800167c:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001686:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001694:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a52      	ldr	r2, [pc, #328]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 800169a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800169e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a0:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	494d      	ldr	r1, [pc, #308]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d040      	beq.n	8001740 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d115      	bne.n	80016fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e07f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e073      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ee:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e06b      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fe:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f023 0203 	bic.w	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4936      	ldr	r1, [pc, #216]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 800170c:	4313      	orrs	r3, r2
 800170e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001710:	f7ff f9ce 	bl	8000ab0 <HAL_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	e00a      	b.n	800172e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001718:	f7ff f9ca 	bl	8000ab0 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	; 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e053      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 020c 	and.w	r2, r3, #12
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	429a      	cmp	r2, r3
 800173e:	d1eb      	bne.n	8001718 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d210      	bcs.n	8001770 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 020f 	bic.w	r2, r3, #15
 8001756:	4922      	ldr	r1, [pc, #136]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e032      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4916      	ldr	r1, [pc, #88]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	490e      	ldr	r1, [pc, #56]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ae:	f000 f821 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	490a      	ldr	r1, [pc, #40]	; (80017e8 <HAL_RCC_ClockConfig+0x1cc>)
 80017c0:	5ccb      	ldrb	r3, [r1, r3]
 80017c2:	fa22 f303 	lsr.w	r3, r2, r3
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_RCC_ClockConfig+0x1d0>)
 80017c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_ClockConfig+0x1d4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f92a 	bl	8000a28 <HAL_InitTick>

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00
 80017e4:	40023800 	.word	0x40023800
 80017e8:	08002730 	.word	0x08002730
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017f8:	b090      	sub	sp, #64	; 0x40
 80017fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001800:	2300      	movs	r3, #0
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001804:	2300      	movs	r3, #0
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_RCC_GetSysClockFreq+0x180>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b08      	cmp	r3, #8
 8001816:	d00d      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x40>
 8001818:	2b08      	cmp	r3, #8
 800181a:	f200 80a1 	bhi.w	8001960 <HAL_RCC_GetSysClockFreq+0x16c>
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x34>
 8001822:	2b04      	cmp	r3, #4
 8001824:	d003      	beq.n	800182e <HAL_RCC_GetSysClockFreq+0x3a>
 8001826:	e09b      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <HAL_RCC_GetSysClockFreq+0x184>)
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800182c:	e09b      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800182e:	4b53      	ldr	r3, [pc, #332]	; (800197c <HAL_RCC_GetSysClockFreq+0x188>)
 8001830:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001832:	e098      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001834:	4b4f      	ldr	r3, [pc, #316]	; (8001974 <HAL_RCC_GetSysClockFreq+0x180>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800183e:	4b4d      	ldr	r3, [pc, #308]	; (8001974 <HAL_RCC_GetSysClockFreq+0x180>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d028      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184a:	4b4a      	ldr	r3, [pc, #296]	; (8001974 <HAL_RCC_GetSysClockFreq+0x180>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	2200      	movs	r2, #0
 8001852:	623b      	str	r3, [r7, #32]
 8001854:	627a      	str	r2, [r7, #36]	; 0x24
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800185c:	2100      	movs	r1, #0
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_RCC_GetSysClockFreq+0x188>)
 8001860:	fb03 f201 	mul.w	r2, r3, r1
 8001864:	2300      	movs	r3, #0
 8001866:	fb00 f303 	mul.w	r3, r0, r3
 800186a:	4413      	add	r3, r2
 800186c:	4a43      	ldr	r2, [pc, #268]	; (800197c <HAL_RCC_GetSysClockFreq+0x188>)
 800186e:	fba0 1202 	umull	r1, r2, r0, r2
 8001872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001874:	460a      	mov	r2, r1
 8001876:	62ba      	str	r2, [r7, #40]	; 0x28
 8001878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800187a:	4413      	add	r3, r2
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800187e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001880:	2200      	movs	r2, #0
 8001882:	61bb      	str	r3, [r7, #24]
 8001884:	61fa      	str	r2, [r7, #28]
 8001886:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800188a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800188e:	f7fe fcd3 	bl	8000238 <__aeabi_uldivmod>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4613      	mov	r3, r2
 8001898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800189a:	e053      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189c:	4b35      	ldr	r3, [pc, #212]	; (8001974 <HAL_RCC_GetSysClockFreq+0x180>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	2200      	movs	r2, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	617a      	str	r2, [r7, #20]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018ae:	f04f 0b00 	mov.w	fp, #0
 80018b2:	4652      	mov	r2, sl
 80018b4:	465b      	mov	r3, fp
 80018b6:	f04f 0000 	mov.w	r0, #0
 80018ba:	f04f 0100 	mov.w	r1, #0
 80018be:	0159      	lsls	r1, r3, #5
 80018c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c4:	0150      	lsls	r0, r2, #5
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	ebb2 080a 	subs.w	r8, r2, sl
 80018ce:	eb63 090b 	sbc.w	r9, r3, fp
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018e6:	ebb2 0408 	subs.w	r4, r2, r8
 80018ea:	eb63 0509 	sbc.w	r5, r3, r9
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	00eb      	lsls	r3, r5, #3
 80018f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018fc:	00e2      	lsls	r2, r4, #3
 80018fe:	4614      	mov	r4, r2
 8001900:	461d      	mov	r5, r3
 8001902:	eb14 030a 	adds.w	r3, r4, sl
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	eb45 030b 	adc.w	r3, r5, fp
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800191a:	4629      	mov	r1, r5
 800191c:	028b      	lsls	r3, r1, #10
 800191e:	4621      	mov	r1, r4
 8001920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001924:	4621      	mov	r1, r4
 8001926:	028a      	lsls	r2, r1, #10
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192e:	2200      	movs	r2, #0
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	60fa      	str	r2, [r7, #12]
 8001934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001938:	f7fe fc7e 	bl	8000238 <__aeabi_uldivmod>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4613      	mov	r3, r2
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_GetSysClockFreq+0x180>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	0c1b      	lsrs	r3, r3, #16
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	3301      	adds	r3, #1
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800195e:	e002      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCC_GetSysClockFreq+0x184>)
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001968:	4618      	mov	r0, r3
 800196a:	3740      	adds	r7, #64	; 0x40
 800196c:	46bd      	mov	sp, r7
 800196e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	00f42400 	.word	0x00f42400
 800197c:	017d7840 	.word	0x017d7840

08001980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e049      	b.n	8001a26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d106      	bne.n	80019ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7fe ff74 	bl	8000894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3304      	adds	r3, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f000 f9da 	bl	8001d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e049      	b.n	8001ad4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d106      	bne.n	8001a5a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f841 	bl	8001adc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	f000 f983 	bl	8001d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_TIM_OC_ConfigChannel+0x1e>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e066      	b.n	8001bdc <HAL_TIM_OC_ConfigChannel+0xec>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b14      	cmp	r3, #20
 8001b1a:	d857      	bhi.n	8001bcc <HAL_TIM_OC_ConfigChannel+0xdc>
 8001b1c:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <HAL_TIM_OC_ConfigChannel+0x34>)
 8001b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b22:	bf00      	nop
 8001b24:	08001b79 	.word	0x08001b79
 8001b28:	08001bcd 	.word	0x08001bcd
 8001b2c:	08001bcd 	.word	0x08001bcd
 8001b30:	08001bcd 	.word	0x08001bcd
 8001b34:	08001b87 	.word	0x08001b87
 8001b38:	08001bcd 	.word	0x08001bcd
 8001b3c:	08001bcd 	.word	0x08001bcd
 8001b40:	08001bcd 	.word	0x08001bcd
 8001b44:	08001b95 	.word	0x08001b95
 8001b48:	08001bcd 	.word	0x08001bcd
 8001b4c:	08001bcd 	.word	0x08001bcd
 8001b50:	08001bcd 	.word	0x08001bcd
 8001b54:	08001ba3 	.word	0x08001ba3
 8001b58:	08001bcd 	.word	0x08001bcd
 8001b5c:	08001bcd 	.word	0x08001bcd
 8001b60:	08001bcd 	.word	0x08001bcd
 8001b64:	08001bb1 	.word	0x08001bb1
 8001b68:	08001bcd 	.word	0x08001bcd
 8001b6c:	08001bcd 	.word	0x08001bcd
 8001b70:	08001bcd 	.word	0x08001bcd
 8001b74:	08001bbf 	.word	0x08001bbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f99a 	bl	8001eb8 <TIM_OC1_SetConfig>
      break;
 8001b84:	e025      	b.n	8001bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 fa05 	bl	8001f9c <TIM_OC2_SetConfig>
      break;
 8001b92:	e01e      	b.n	8001bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 fa76 	bl	800208c <TIM_OC3_SetConfig>
      break;
 8001ba0:	e017      	b.n	8001bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fae5 	bl	8002178 <TIM_OC4_SetConfig>
      break;
 8001bae:	e010      	b.n	8001bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 fb36 	bl	8002228 <TIM_OC5_SetConfig>
      break;
 8001bbc:	e009      	b.n	8001bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68b9      	ldr	r1, [r7, #8]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fb81 	bl	80022cc <TIM_OC6_SetConfig>
      break;
 8001bca:	e002      	b.n	8001bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	75fb      	strb	r3, [r7, #23]
      break;
 8001bd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d101      	bne.n	8001c00 <HAL_TIM_ConfigClockSource+0x1c>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e0b4      	b.n	8001d6a <HAL_TIM_ConfigClockSource+0x186>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	4b56      	ldr	r3, [pc, #344]	; (8001d74 <HAL_TIM_ConfigClockSource+0x190>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c38:	d03e      	beq.n	8001cb8 <HAL_TIM_ConfigClockSource+0xd4>
 8001c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c3e:	f200 8087 	bhi.w	8001d50 <HAL_TIM_ConfigClockSource+0x16c>
 8001c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c46:	f000 8086 	beq.w	8001d56 <HAL_TIM_ConfigClockSource+0x172>
 8001c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c4e:	d87f      	bhi.n	8001d50 <HAL_TIM_ConfigClockSource+0x16c>
 8001c50:	2b70      	cmp	r3, #112	; 0x70
 8001c52:	d01a      	beq.n	8001c8a <HAL_TIM_ConfigClockSource+0xa6>
 8001c54:	2b70      	cmp	r3, #112	; 0x70
 8001c56:	d87b      	bhi.n	8001d50 <HAL_TIM_ConfigClockSource+0x16c>
 8001c58:	2b60      	cmp	r3, #96	; 0x60
 8001c5a:	d050      	beq.n	8001cfe <HAL_TIM_ConfigClockSource+0x11a>
 8001c5c:	2b60      	cmp	r3, #96	; 0x60
 8001c5e:	d877      	bhi.n	8001d50 <HAL_TIM_ConfigClockSource+0x16c>
 8001c60:	2b50      	cmp	r3, #80	; 0x50
 8001c62:	d03c      	beq.n	8001cde <HAL_TIM_ConfigClockSource+0xfa>
 8001c64:	2b50      	cmp	r3, #80	; 0x50
 8001c66:	d873      	bhi.n	8001d50 <HAL_TIM_ConfigClockSource+0x16c>
 8001c68:	2b40      	cmp	r3, #64	; 0x40
 8001c6a:	d058      	beq.n	8001d1e <HAL_TIM_ConfigClockSource+0x13a>
 8001c6c:	2b40      	cmp	r3, #64	; 0x40
 8001c6e:	d86f      	bhi.n	8001d50 <HAL_TIM_ConfigClockSource+0x16c>
 8001c70:	2b30      	cmp	r3, #48	; 0x30
 8001c72:	d064      	beq.n	8001d3e <HAL_TIM_ConfigClockSource+0x15a>
 8001c74:	2b30      	cmp	r3, #48	; 0x30
 8001c76:	d86b      	bhi.n	8001d50 <HAL_TIM_ConfigClockSource+0x16c>
 8001c78:	2b20      	cmp	r3, #32
 8001c7a:	d060      	beq.n	8001d3e <HAL_TIM_ConfigClockSource+0x15a>
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d867      	bhi.n	8001d50 <HAL_TIM_ConfigClockSource+0x16c>
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d05c      	beq.n	8001d3e <HAL_TIM_ConfigClockSource+0x15a>
 8001c84:	2b10      	cmp	r3, #16
 8001c86:	d05a      	beq.n	8001d3e <HAL_TIM_ConfigClockSource+0x15a>
 8001c88:	e062      	b.n	8001d50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6899      	ldr	r1, [r3, #8]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f000 fbe5 	bl	8002468 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001cac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	609a      	str	r2, [r3, #8]
      break;
 8001cb6:	e04f      	b.n	8001d58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6899      	ldr	r1, [r3, #8]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f000 fbce 	bl	8002468 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cda:	609a      	str	r2, [r3, #8]
      break;
 8001cdc:	e03c      	b.n	8001d58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6859      	ldr	r1, [r3, #4]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	461a      	mov	r2, r3
 8001cec:	f000 fb42 	bl	8002374 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2150      	movs	r1, #80	; 0x50
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fb9b 	bl	8002432 <TIM_ITRx_SetConfig>
      break;
 8001cfc:	e02c      	b.n	8001d58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f000 fb61 	bl	80023d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2160      	movs	r1, #96	; 0x60
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fb8b 	bl	8002432 <TIM_ITRx_SetConfig>
      break;
 8001d1c:	e01c      	b.n	8001d58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6859      	ldr	r1, [r3, #4]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f000 fb22 	bl	8002374 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2140      	movs	r1, #64	; 0x40
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fb7b 	bl	8002432 <TIM_ITRx_SetConfig>
      break;
 8001d3c:	e00c      	b.n	8001d58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4619      	mov	r1, r3
 8001d48:	4610      	mov	r0, r2
 8001d4a:	f000 fb72 	bl	8002432 <TIM_ITRx_SetConfig>
      break;
 8001d4e:	e003      	b.n	8001d58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
      break;
 8001d54:	e000      	b.n	8001d58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	fffeff88 	.word	0xfffeff88

08001d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a40      	ldr	r2, [pc, #256]	; (8001e8c <TIM_Base_SetConfig+0x114>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d013      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d96:	d00f      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a3d      	ldr	r2, [pc, #244]	; (8001e90 <TIM_Base_SetConfig+0x118>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d00b      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3c      	ldr	r2, [pc, #240]	; (8001e94 <TIM_Base_SetConfig+0x11c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d007      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a3b      	ldr	r2, [pc, #236]	; (8001e98 <TIM_Base_SetConfig+0x120>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d003      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3a      	ldr	r2, [pc, #232]	; (8001e9c <TIM_Base_SetConfig+0x124>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d108      	bne.n	8001dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a2f      	ldr	r2, [pc, #188]	; (8001e8c <TIM_Base_SetConfig+0x114>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d02b      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd8:	d027      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a2c      	ldr	r2, [pc, #176]	; (8001e90 <TIM_Base_SetConfig+0x118>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d023      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a2b      	ldr	r2, [pc, #172]	; (8001e94 <TIM_Base_SetConfig+0x11c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a2a      	ldr	r2, [pc, #168]	; (8001e98 <TIM_Base_SetConfig+0x120>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01b      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a29      	ldr	r2, [pc, #164]	; (8001e9c <TIM_Base_SetConfig+0x124>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d017      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a28      	ldr	r2, [pc, #160]	; (8001ea0 <TIM_Base_SetConfig+0x128>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <TIM_Base_SetConfig+0x12c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00f      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <TIM_Base_SetConfig+0x130>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00b      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a25      	ldr	r2, [pc, #148]	; (8001eac <TIM_Base_SetConfig+0x134>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <TIM_Base_SetConfig+0x138>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d003      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <TIM_Base_SetConfig+0x13c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d108      	bne.n	8001e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <TIM_Base_SetConfig+0x114>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d003      	beq.n	8001e70 <TIM_Base_SetConfig+0xf8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <TIM_Base_SetConfig+0x124>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d103      	bne.n	8001e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	615a      	str	r2, [r3, #20]
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800
 8001e98:	40000c00 	.word	0x40000c00
 8001e9c:	40010400 	.word	0x40010400
 8001ea0:	40014000 	.word	0x40014000
 8001ea4:	40014400 	.word	0x40014400
 8001ea8:	40014800 	.word	0x40014800
 8001eac:	40001800 	.word	0x40001800
 8001eb0:	40001c00 	.word	0x40001c00
 8001eb4:	40002000 	.word	0x40002000

08001eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	f023 0201 	bic.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <TIM_OC1_SetConfig+0xd8>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f023 0303 	bic.w	r3, r3, #3
 8001eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f023 0302 	bic.w	r3, r3, #2
 8001f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <TIM_OC1_SetConfig+0xdc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d003      	beq.n	8001f1c <TIM_OC1_SetConfig+0x64>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a20      	ldr	r2, [pc, #128]	; (8001f98 <TIM_OC1_SetConfig+0xe0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d10c      	bne.n	8001f36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f023 0308 	bic.w	r3, r3, #8
 8001f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a16      	ldr	r2, [pc, #88]	; (8001f94 <TIM_OC1_SetConfig+0xdc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d003      	beq.n	8001f46 <TIM_OC1_SetConfig+0x8e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a15      	ldr	r2, [pc, #84]	; (8001f98 <TIM_OC1_SetConfig+0xe0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d111      	bne.n	8001f6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	621a      	str	r2, [r3, #32]
}
 8001f84:	bf00      	nop
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	fffeff8f 	.word	0xfffeff8f
 8001f94:	40010000 	.word	0x40010000
 8001f98:	40010400 	.word	0x40010400

08001f9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	f023 0210 	bic.w	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4b2e      	ldr	r3, [pc, #184]	; (8002080 <TIM_OC2_SetConfig+0xe4>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f023 0320 	bic.w	r3, r3, #32
 8001fe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a23      	ldr	r2, [pc, #140]	; (8002084 <TIM_OC2_SetConfig+0xe8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d003      	beq.n	8002004 <TIM_OC2_SetConfig+0x68>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a22      	ldr	r2, [pc, #136]	; (8002088 <TIM_OC2_SetConfig+0xec>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d10d      	bne.n	8002020 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800200a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800201e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a18      	ldr	r2, [pc, #96]	; (8002084 <TIM_OC2_SetConfig+0xe8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d003      	beq.n	8002030 <TIM_OC2_SetConfig+0x94>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a17      	ldr	r2, [pc, #92]	; (8002088 <TIM_OC2_SetConfig+0xec>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d113      	bne.n	8002058 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800203e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	621a      	str	r2, [r3, #32]
}
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	feff8fff 	.word	0xfeff8fff
 8002084:	40010000 	.word	0x40010000
 8002088:	40010400 	.word	0x40010400

0800208c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <TIM_OC3_SetConfig+0xe0>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 0303 	bic.w	r3, r3, #3
 80020c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	4313      	orrs	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a22      	ldr	r2, [pc, #136]	; (8002170 <TIM_OC3_SetConfig+0xe4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d003      	beq.n	80020f2 <TIM_OC3_SetConfig+0x66>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a21      	ldr	r2, [pc, #132]	; (8002174 <TIM_OC3_SetConfig+0xe8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d10d      	bne.n	800210e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	021b      	lsls	r3, r3, #8
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	4313      	orrs	r3, r2
 8002104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800210c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a17      	ldr	r2, [pc, #92]	; (8002170 <TIM_OC3_SetConfig+0xe4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d003      	beq.n	800211e <TIM_OC3_SetConfig+0x92>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a16      	ldr	r2, [pc, #88]	; (8002174 <TIM_OC3_SetConfig+0xe8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d113      	bne.n	8002146 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800212c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	621a      	str	r2, [r3, #32]
}
 8002160:	bf00      	nop
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	fffeff8f 	.word	0xfffeff8f
 8002170:	40010000 	.word	0x40010000
 8002174:	40010400 	.word	0x40010400

08002178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <TIM_OC4_SetConfig+0xa4>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	031b      	lsls	r3, r3, #12
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a13      	ldr	r2, [pc, #76]	; (8002220 <TIM_OC4_SetConfig+0xa8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d003      	beq.n	80021e0 <TIM_OC4_SetConfig+0x68>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <TIM_OC4_SetConfig+0xac>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d109      	bne.n	80021f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	019b      	lsls	r3, r3, #6
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	621a      	str	r2, [r3, #32]
}
 800220e:	bf00      	nop
 8002210:	371c      	adds	r7, #28
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	feff8fff 	.word	0xfeff8fff
 8002220:	40010000 	.word	0x40010000
 8002224:	40010400 	.word	0x40010400

08002228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <TIM_OC5_SetConfig+0x98>)
 8002254:	4013      	ands	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	041b      	lsls	r3, r3, #16
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <TIM_OC5_SetConfig+0x9c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d003      	beq.n	8002286 <TIM_OC5_SetConfig+0x5e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <TIM_OC5_SetConfig+0xa0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d109      	bne.n	800229a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	621a      	str	r2, [r3, #32]
}
 80022b4:	bf00      	nop
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	fffeff8f 	.word	0xfffeff8f
 80022c4:	40010000 	.word	0x40010000
 80022c8:	40010400 	.word	0x40010400

080022cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <TIM_OC6_SetConfig+0x9c>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800230e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	051b      	lsls	r3, r3, #20
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a13      	ldr	r2, [pc, #76]	; (800236c <TIM_OC6_SetConfig+0xa0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d003      	beq.n	800232c <TIM_OC6_SetConfig+0x60>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <TIM_OC6_SetConfig+0xa4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d109      	bne.n	8002340 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	029b      	lsls	r3, r3, #10
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	621a      	str	r2, [r3, #32]
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	feff8fff 	.word	0xfeff8fff
 800236c:	40010000 	.word	0x40010000
 8002370:	40010400 	.word	0x40010400

08002374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	f023 0201 	bic.w	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800239e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f023 030a 	bic.w	r3, r3, #10
 80023b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	621a      	str	r2, [r3, #32]
}
 80023c6:	bf00      	nop
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b087      	sub	sp, #28
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	f023 0210 	bic.w	r2, r3, #16
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	031b      	lsls	r3, r3, #12
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4313      	orrs	r3, r2
 8002406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800240e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	621a      	str	r2, [r3, #32]
}
 8002426:	bf00      	nop
 8002428:	371c      	adds	r7, #28
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	f043 0307 	orr.w	r3, r3, #7
 8002454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	609a      	str	r2, [r3, #8]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	021a      	lsls	r2, r3, #8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	431a      	orrs	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4313      	orrs	r3, r2
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	609a      	str	r2, [r3, #8]
}
 800249c:	bf00      	nop
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024bc:	2302      	movs	r3, #2
 80024be:	e06d      	b.n	800259c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a30      	ldr	r2, [pc, #192]	; (80025a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d004      	beq.n	80024f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a2f      	ldr	r2, [pc, #188]	; (80025ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d108      	bne.n	8002506 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80024fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d022      	beq.n	8002570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002532:	d01d      	beq.n	8002570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d018      	beq.n	8002570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d013      	beq.n	8002570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00e      	beq.n	8002570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a15      	ldr	r2, [pc, #84]	; (80025ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d009      	beq.n	8002570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a16      	ldr	r2, [pc, #88]	; (80025bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d004      	beq.n	8002570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d10c      	bne.n	800258a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002576:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	4313      	orrs	r3, r2
 8002580:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40010000 	.word	0x40010000
 80025ac:	40010400 	.word	0x40010400
 80025b0:	40000400 	.word	0x40000400
 80025b4:	40000800 	.word	0x40000800
 80025b8:	40000c00 	.word	0x40000c00
 80025bc:	40014000 	.word	0x40014000
 80025c0:	40001800 	.word	0x40001800

080025c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80025dc:	2302      	movs	r3, #2
 80025de:	e065      	b.n	80026ac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	041b      	lsls	r3, r3, #16
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a16      	ldr	r2, [pc, #88]	; (80026b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d004      	beq.n	800266e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a14      	ldr	r2, [pc, #80]	; (80026bc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d115      	bne.n	800269a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	051b      	lsls	r3, r3, #20
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	4313      	orrs	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40010000 	.word	0x40010000
 80026bc:	40010400 	.word	0x40010400

080026c0 <__libc_init_array>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	4d0d      	ldr	r5, [pc, #52]	; (80026f8 <__libc_init_array+0x38>)
 80026c4:	4c0d      	ldr	r4, [pc, #52]	; (80026fc <__libc_init_array+0x3c>)
 80026c6:	1b64      	subs	r4, r4, r5
 80026c8:	10a4      	asrs	r4, r4, #2
 80026ca:	2600      	movs	r6, #0
 80026cc:	42a6      	cmp	r6, r4
 80026ce:	d109      	bne.n	80026e4 <__libc_init_array+0x24>
 80026d0:	4d0b      	ldr	r5, [pc, #44]	; (8002700 <__libc_init_array+0x40>)
 80026d2:	4c0c      	ldr	r4, [pc, #48]	; (8002704 <__libc_init_array+0x44>)
 80026d4:	f000 f820 	bl	8002718 <_init>
 80026d8:	1b64      	subs	r4, r4, r5
 80026da:	10a4      	asrs	r4, r4, #2
 80026dc:	2600      	movs	r6, #0
 80026de:	42a6      	cmp	r6, r4
 80026e0:	d105      	bne.n	80026ee <__libc_init_array+0x2e>
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
 80026e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e8:	4798      	blx	r3
 80026ea:	3601      	adds	r6, #1
 80026ec:	e7ee      	b.n	80026cc <__libc_init_array+0xc>
 80026ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f2:	4798      	blx	r3
 80026f4:	3601      	adds	r6, #1
 80026f6:	e7f2      	b.n	80026de <__libc_init_array+0x1e>
 80026f8:	08002748 	.word	0x08002748
 80026fc:	08002748 	.word	0x08002748
 8002700:	08002748 	.word	0x08002748
 8002704:	0800274c 	.word	0x0800274c

08002708 <memset>:
 8002708:	4402      	add	r2, r0
 800270a:	4603      	mov	r3, r0
 800270c:	4293      	cmp	r3, r2
 800270e:	d100      	bne.n	8002712 <memset+0xa>
 8002710:	4770      	bx	lr
 8002712:	f803 1b01 	strb.w	r1, [r3], #1
 8002716:	e7f9      	b.n	800270c <memset+0x4>

08002718 <_init>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	bf00      	nop
 800271c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271e:	bc08      	pop	{r3}
 8002720:	469e      	mov	lr, r3
 8002722:	4770      	bx	lr

08002724 <_fini>:
 8002724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002726:	bf00      	nop
 8002728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272a:	bc08      	pop	{r3}
 800272c:	469e      	mov	lr, r3
 800272e:	4770      	bx	lr
